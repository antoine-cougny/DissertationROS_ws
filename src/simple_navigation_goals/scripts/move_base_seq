#!/usr/bin/env python
# license removed for brevity
__author__ = 'fiorellasibona'
__author__ += ' & ant0ine'
import rospy
import math

import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib_msgs.msg import GoalStatus
from geometry_msgs.msg import Pose, Point, Quaternion
from tf.transformations import quaternion_from_euler
from std_msgs.msg import Bool
from std_srvs.srv import Trigger, TriggerResponse

try:
    from trader.msg import Task, actionToDo
    from trader.srv import taskToBeTraded, taskToBeTradedRequest
    msgCheck = True
except:
    print("Trader Custom msg not available")
    msgCheck = False

class MoveBaseSeq():

    def __init__(self):

        rospy.init_node('move_base_sequence')
        points_seq = rospy.get_param('move_base_seq/p_seq', '[0,0,0]')
        # Only yaw angle required (no ratotions around x and y axes) in deg:
        yaweulerangles_seq = rospy.get_param('move_base_seq/yea_seq')
        
        try:
            self.map_goal_prefix = rospy.get_param('tf_prefix') + "/"
        except:
            self.map_goal_prefix = ""

        #List of goal quaternions:
        quat_seq = list()
        #List of goal poses:
        self.pose_seq = list()
        self.goal_cnt = 0
        for yawangle in yaweulerangles_seq:
            #Unpacking the quaternion tuple and passing it as arguments to Quaternion message constructor
            quat_seq.append(Quaternion(*(quaternion_from_euler(0, 0, yawangle*math.pi/180, axes='sxyz'))))
        n = 3
        # Returns a list of lists [[point1], [point2],...[pointn]]
        points = [points_seq[i:i+n] for i in range(0, len(points_seq), n)]
        rospy.loginfo(str(points))
        for point in points:
            #Exploit n variable to cycle in quat_seq
            self.pose_seq.append(Pose(Point(*point),quat_seq[n-3]))
            n += 1
        #rospy.loginfo(str(self.pose_seq))

        # List of task to perform on the different goal
        # We make sure we have enough task to do in the list
        self.task_seq = [Task() for k in range(len(self.pose_seq))]
        # For now the task do not do anything
        for task in self.task_seq:
            task.toDo.waitTime = 1 #sec

        # For timeout purpose with the last received msg
        self.last_msg = rospy.Time.now()
        self.timeFinishList = rospy.Time.now()
        # Subscriber to receive message
        self.sub = rospy.Subscriber("goalSender", Task, self.readNewGoal_cb)
        # I use a busy waiting to wait the server feddback
        self.goalReached = False
        # When all goals will be reached we will wait
        self.allGoalsReached = False

        # Create a publisher to let other nodes if the robot is idle or not
        self.isIdle_pub = rospy.Publisher("isIdle", Bool, queue_size=10)

        # Create service to remotely kill the robot
        self.robotKiller_srvS = rospy.Service('robotDeath', Trigger, self.robotDeath_cb)
        self.isDead = False

        # Quick patch to make sure the robot does not do a task if the goal was cancelled
        self.taskAborted = False

        # Create action client
        self.client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
        rospy.loginfo("Waiting for move_base action server...")
        wait = self.client.wait_for_server(rospy.Duration(10.0))
        if not wait:
            rospy.logerr("Action server not available!")
            rospy.signal_shutdown("Action server not available!")
            return
        rospy.loginfo("Connected to move base server")
        rospy.loginfo("Starting goals achievements ...")
        self.runNode()

    def readNewGoal_cb(self, msg):
        self.pose_seq.append(msg.goalPosition_p)
        self.task_seq.append(msg)
        self.last_msg = rospy.Time.now()
        self.allGoalsReached = False
        rospy.logdebug("We Got A NEW GOAL")

    def active_cb(self):
        rospy.loginfo("Goal pose "+str(self.goal_cnt+1)+\
                      " is now being processed by the Action Server...")

    def feedback_cb(self, feedback):
        #rospy.loginfo("Feedback for goal "+str(self.goal_cnt)+": "+str(feedback))
        rospy.logdebug("Feedback for goal pose "+str(self.goal_cnt+1)+" received")

    def done_cb(self, status, result):
        self.goalReached = True
        self.goal_cnt += 1

        # Reference for terminal status values: 
        # http://docs.ros.org/diamondback/api/actionlib_msgs/html/msg/GoalStatus.html
        if status == 2:
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+\
                          " received a cancel request after it started executing, completed execution!")

        if status == 3:
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" reached")

        if status == 4:
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" was aborted by the Action Server")
            # rospy.signal_shutdown("Goal pose "+str(self.goal_cnt)+" aborted, shutting down!")
            self.taskAborted = True
            self.sendFailedTaskToTrader(self.task_seq[self.goal_cnt-1])
            return

        if status == 5:
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" has been rejected by the Action Server")
            # rospy.signal_shutdown("Goal pose "+str(self.goal_cnt)+" rejected, shutting down!")
            self.taskAborted = True
            self.sendFailedTaskToTrader(self.task_seq[self.goal_cnt-1])
            return

        if status == 8:
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+\
                          " received a cancel request before it started executing, successfully cancelled!")

    def robotDeath_cb(self, req):
        """ Call back function used to kill or revive a robot """
        self.isDead = not self.isDead
        if self.isDead:
            # Cancel the current goal
            self.client.cancel_all_goals()
            # Block any incoming auction
            self.isIdle_pub.publish(Bool(False))
            rospy.logerr("The robot has been killed! The current goal has been cancelled.")
            # The robot might be killed while being idle. The task is sent only if we haven't finished it
            if not self.allGoalsReached:
                # Send the task to the traderNode again
                self.sendFailedTaskToTrader(self.task_seq[self.goal_cnt-1])
        else:
            #self.goal_cnt -= 1
            rospy.logwarn("Hurrah, the robot is alive again! " +
                          "What a good paramedic you are! " +
                          "The previous goal is sent again for completion.")
        return TriggerResponse(self.isDead, "Changed State")

    def movebase_client(self, nextPose):
        """
        Send a goal to the SimpleAction Server
        """
        # Prepare Message
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = self.map_goal_prefix + "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose = nextPose
        # Log
        rospy.logdebug("Sending goal pose "+str(self.goal_cnt+1)+" to Action Server")
        rospy.logdebug(str(self.pose_seq[self.goal_cnt]))
        # Send message
        self.client.send_goal(goal, self.done_cb, self.active_cb, self.feedback_cb)
        rospy.logdebug("Sent!")
        # rospy.spin()
        return

    def markTaskAsDone(self, task):
        """
        Contact the bc_handler to mark the token as done
        """
        # Wait until the service is available
        rospy.logdebug("Sending task to bc_handler")
        #rospy.wait_for_service('markTaskDone', timeout=2.0)
        tryAgain = 5
        while tryAgain:
            tryAgain -= 1
            try:
                markTaskDone = rospy.ServiceProxy('markTaskDone', taskToBeTraded)
                markTask = markTaskDone(taskToBeTradedRequest(task))

                if markTask.auctionReady:
                    rospy.loginfo("BC handler will mark the task as done")
                    tryAgain = 0
                else:
                    rospy.loginfo("bc_handler has not accepted to mark the task as done")
                    # Wait 1 sec
                    rospy.sleep(1)

            except rospy.ServiceException, e:
                rospy.logwarn("Service call to bc_handler failed: %s"%e)
        return

    def sendFailedTaskToTrader(self, task):
        rospy.logwarn("The task that was in execution will be re-auctioned")
        # Wait until the service is available
        #rospy.wait_for_service('taskToTrade', timeout=2.0)
        tryAgain = 5
        if self.goal_cnt > 1: # Ugly quickfix for initialization
            while tryAgain:
                tryAgain -= 1
                try:
                    tradeTaskAgain = rospy.ServiceProxy('taskToTrade', taskToBeTraded)
                    tradeTask = tradeTaskAgain(task)

                    if not tradeTask.auctionReady:
                        # traderNode has not accepted the task, we send it to the decisionNode
                        rospy.logwarn("traderNode has not accepted the failed task. "
                                    + "Falling back to the decisionNode")
                        # TODO: see comment above
                        # Wait 1 sec
                        rospy.sleep(1)
                    else:
                        tryAgain = 0
                        self.taskAborted = False
                        rospy.loginfo("traderNode has accepted to sell the task again")

                except rospy.ServiceException, e:
                    rospy.logwarn("Service call to traderNode failed: %s"%e)
        return

    def performTask(self, task):
        rospy.logdebug("Starting task at the last reached position")
        rospy.loginfo("Waiting " + str(task.toDo.waitTime) + " sec here")
        rospy.sleep(task.toDo.waitTime)
        self.markTaskAsDone(task)
        return

    def runNode(self):
        rospy.loginfo("Starting while loop")
        while not rospy.is_shutdown():
            rospy.sleep(0.5)

            # We advertise if the robot is idle or not. We consider it
            # to be in an 'idle' state when all the tasks this node received
            # have been done/achieved by the nav stack
            # If the robot is dead, we are considered busy, so not idle
            state = Bool()
            # True if alive & all tasks are done
            state.data = self.allGoalsReached and not self.isDead
            self.isIdle_pub.publish(state)

            if self.goal_cnt < len(self.pose_seq) and not self.isDead:
                # Sending a new goal to the stack
                rospy.logdebug("Sending new goal")
                self.goalReached = False
                self.movebase_client(self.pose_seq[self.goal_cnt])

                # Wait for callback of goal being reached
                while not self.goalReached:
                    rospy.sleep(0.5)
                    rospy.logdebug("Small wait")

                # Goal achieved, perform a task
                # -1 because +1 when goal is reached
                # Last condition for initialization, to be sure we get robot
                # position in metrics node. We skip the first one.
                # QUICKFIX. TODO: Improve this
                if not self.isDead and not self.taskAborted and self.goal_cnt > 1:
                    self.performTask(self.task_seq[self.goal_cnt-1])
                    rospy.loginfo("Task done")
            else:
                # The list of nodes has been visited
                self.allGoalsReached = True
                self.timeFinishList = rospy.Time.now()
                rospy.logdebug("We wait for smth to do")


if __name__ == '__main__':
    try:
        if msgCheck:
            MoveBaseSeq()
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation finished.")
